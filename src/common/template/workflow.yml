# 对于js python 脚本也可以实现，这种配置文件的作用是 提供一个脚本编排系统，侧重命令有顺序的执行，最重要的是，符合某个平台（github,gitlab,filecat)的规范，可以和这个平台做出很多好玩的可视化搭配操作
name: test  # 名字 不支持 {{}}
run-name: 构建项目 # 用于日志显示的名字

# import-files: # 导入多个文件的配置 用于下面的 use-yml 指令
#     - ./ok.yml
inputs:
  job: # 输入参数的 key 子字段只是为了修饰 调用的时候 使用  {{{job}}} 会添加并覆盖到 env 中的值
    description: "任务参数"
    required: true # 是否必须
    default: build # 默认值
    options:
      - false
      - '1232'

env: # 定义一些环境变量 这些 环境变量可以在 run 或者 cwd 中 或者 run-name 中使用  {{}} 来表达 使用的时候 必须要用 '' 字符串括起来，不然会被处理成变量 {{{ }}} 是非转义方式 采用 Mustache js
  version: 1
  cmd_install: npm install
  token: 123
  info: "{a:1}"

file-env: # 这个env是用于读取文件的，将文件内容变成一个环境变量
  name: ./ok.txt

username: admin # 需要执行用户的账号 该脚本需要运行在某个用户下
user_id: 1 # 会覆盖 username 对应的用户 id 只允许特定设置的用户在这里可以被设置 运行

# 所有的jobs下的任务都会被并行执行
jobs:
  build-job1:
    if: 1==1 # 判断这个job要不要执行
    cwd: E:\test # 需要一个实际的执行目录 默认是当前的yml所在目录 目录内的文件清理需要自己使用命令操作 必须是绝对路径
    name: 第一阶段执行
    # need-jobs: [build-job2] # 需要别的job先完成 只能是本文件内的
    steps: # 这些脚本会按顺序执行
      - use-yml: test2 # 使用其它 yml 文件中的 name
        with-env:
             version: 18 # 使用其它文件的时候 给一些环境变量参数
      #   - run: pip.exe install setuptools
      #   - run: npm.cmd install
      #   - run: ok1
      #   - run: ls
      - run: npm run build
      - run-js: filecat_env.version = 1 # 在step中也有run-js属性，仅仅是执行js代码，沙箱环境中有fetch neele filecat_env(本环节的变量) sys_env 四个可以使用的变量，且是最优先执行的属性
    #   - run: npm publish # 执行一些脚本
  build-job2:
    cwd: E:\test2
    name: 第二阶段
    env: # 默认传全部，如果有这个传这个
      a: { { 1 } }
    # while:  2 > 1 #是否再执行一次
    steps:
      - if: 1==2 # 判断这个step要不要执行
        run: ls # run run-js use-yml 这三个只能执行一个, run-js
        runs: [sudo node a.js,dsijie33s] # 多个命令同时被输出，可以用于像sudo这样需要下一次输入密码的情况
      - sleep: 1000 # 随眠一秒继续执行
      - run: node a.js
        out-env: info # 可选的，执行后将输出（多次会覆盖）的值输出到这个env中，暂时不支持ls cd pwd 等pty-shell的内建命令输出,debug开发可能会有多余输出
        catch-js: '2 > 1' # 如果出错了，判断一下是否继续执行，job也支持，支持 run runs run-js
        while: 1 > 2 # 是否再执行一次

