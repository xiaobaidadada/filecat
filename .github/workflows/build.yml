name: "构建与发布"
run-name: 任务参数:${{ inputs.job }} ;分支:${{ github.ref_name }} # 每次运行的时候显示的名字

# 本yml参考于 https://github.com/WiseLibs/better-sqlite3/blob/master/.github/workflows/build.yml
on:
  workflow_dispatch: # 手动触发 push(推送时候) pull_request(pr创建的时候)
    inputs: # 只有这个属性 用于接收多个参数 可能是为了预留功能 一个属性也设置
      job: # 参数名称 通过 ${{ github.event.inputs.job }} 访问值 下面是参数的要求描述
        description: "任务类型,build-exe,push-docker,push-npm,all"
        required: true
        default: build-exe
        type: string
      tag:
        description: '发布docker可选的docker标签'
        required: false
        default: ''
      ubuntu_version:
        description: 'ubuntu版本'
        required: false
        default: 'ubuntu-latest' #  ${{ inputs.ubuntu_version || 'ubuntu-20.04' }} 也可以
      win_version:
        description: 'windows版本'
        required: false
        default: 'windows-latest'


jobs:
  push-npm:
    if: ${{ github.event.inputs.job == 'push-npm' || github.event.inputs.job == 'all' }}
    runs-on: windows-2022
    name: 推送到npm
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org
      - run: pip.exe install setuptools
      - run: npm install
      - run: npm run build
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  push-docker:
    if: ${{ github.event.inputs.job == 'push-docker' || github.event.inputs.job == 'all' }}
    runs-on: ${{inputs.ubuntu_version}}
    container: node:18-alpine
    env:
      DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}/filecat
      DOCKER_PLATFORMS: linux/amd64,linux/arm,linux/arm64 # 目标平台
    steps:
      - uses: actions/checkout@v4 
      - run: apk add docker build-base linux-headers git python3 py3-setuptools --update-cache
      - name: Docker meta # 镜像仓库
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: | 
            ${{ env.DOCKER_REPO }}
            ghcr.io/${{ github.repository }}
          tags: |
            ${{ github.ref_name }}   
            latest                  
            ${{ github.event.inputs.tag && github.event.inputs.tag || '' }}  

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3
      - name: build
        run: |  # --ignore-scripts 不能使用不能跳过一些安装脚本 
          npm install 
          npm run exe-build
#          npm install --omit=dev # 构建完不要node_moule了
      - name: Login to Docker Hub # login to Docker Hub, automatically logout at the end of job
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run buildx and push
        uses: docker/build-push-action@v6
        with:
          context: .
          provenance: false
          push: true # push to docker hub
          platforms: ${{ env.DOCKER_PLATFORMS }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  build-exe: # 在大于20.04 版本的ubuntu上经常出现 进程监控的二进制包下载编译后 .node 缺失version `GLIBC_2.34‘ not found的错误 多构建几次就好了 todo 有空解决这个entire
    if: ${{ github.event.inputs.job == 'build-exe'  || github.event.inputs.job == 'all'}}
    strategy:
      matrix:
        os: [ "${{inputs.ubuntu_version}}" , "${{inputs.win_version}}"  ]
    name: 构建在 ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      - if: ${{ startsWith(matrix.os, 'windows')}}
        run: |
          npm run build-exe-win-x64
          npx --no-install prebuild --upload-files "filecat-win-x64.tar.gz" -u ${{ secrets.GITHUB_TOKEN }}
      - if: ${{ startsWith(matrix.os, 'ubuntu')}}
        run: |
          npm run build-exe-linux-x64
          npx --no-install prebuild --upload-files "filecat-linux-x64.tar.gz" -u ${{ secrets.GITHUB_TOKEN }}
#
